---
type Color = "primary" | "secondary";
type Type = "solid" | "outline" | "ghost" | "ghost-underline";
type Shape = "shark" | "rounded-4" | "rounded-8" | "pill" | "circle";

export interface Props {
	children: any;
	type: Type;
	color?: Color;
	class?: string;
	href?: string;
	shape?: Shape;
	i11nAttrs?: Object;
	isExternal?: boolean;
}

const {
	href,
	type,
	color,
	class: className,
	shape = "rounded-8",
	i11nAttrs = {},
	isExternal = false,
} = Astro.props;

const ElementToRender = href ? "a" : "button";

const style = {
	"--radius": `${shape ? `var(--radius-${shape})` : ""}`,
};

const attrs = {
	href,
	style,
	...i11nAttrs,
};

const externalAtts = isExternal
	? { ...attrs, target: "_blank", rel: "noopener noreferrer" }
	: { ...attrs };
---

<ElementToRender
	class:list={[
		"btn",
		{
			[`btn--${type}`]: type,
			[`btn--${color}`]: color,
			[`${className}`]: !!className,
		},
	]}
	{...externalAtts}
>
	<slot />
</ElementToRender>

<style>
	/* Base button */
	.btn {
		position: relative;
		display: inline-flex;
		gap: var(--space-stack-8x);
		align-items: center;
		justify-content: center;
		padding: var(--space-stack-8x) var(--space-stack-16x);
		font-size: inherit;
		font-weight: var(--font-weight-bold);
		color: inherit;
		text-align: center;
		text-transform: inherit;
		cursor: pointer;
		user-select: none;
		border: 2px solid transparent;
		border-radius: var(--radius);
	}

	.btn:is(:hover, :focus-visible, :active) {
		scale: 1.15;
	}

	@media (prefers-reduced-motion: no-preference) {
		.btn {
			transition: color var(--appears-transition),
				background-color var(--theme-transition),
				border-color var(--theme-transition), scale var(--appears-transition);
			transition-duration: .3s;
		}
	}

	/* click effect */
	.btn::after {
		position: absolute;
		inset: 0;
		content: "";
		border-radius: inherit;
		box-shadow: var(--elevation-inset-1);
		opacity: 0;
		transition: opacity .3s var(--bouncing-appears-transition);
	}

	.btn:is(:active, [aria-expanded="true"])::after {
		opacity: 0.8;
	}

	/* Button type */
	.btn--solid {
		background-color: var(--surface);
		box-shadow: var(--elevation-1);
	}

	:is(.btn--ghost, .btn--outline, .btn--ghost-underline) {
		background-color: transparent;
	}

	.btn--outline {
		overflow: hidden;
		color: var(--on-surface);
		border-color: inherit;
	}

	.btn--outline::before {
		position: absolute;
		inset: -20%;
		z-index: -1;
		content: "";
		background-color: var(--surface);
		border-radius: var(--radius-circle);
		transition: scale .4s var(--appears-transition);
		transform-origin: bottom;
		scale: 1 0;
	}

	.btn--outline:is(:hover, :focus-visible, :active)::before {
		scale: 1;
	}

	.btn--ghost-underline::before {
		position: absolute;
		inset-inline: 0;
		content: "";
		background-color: var(--on-surface);
		border-radius: var(--radius-pill);
		transition: scale .3s var(--bouncing-transition);
		transform-origin: center;
		block-size: 0.125rem;
		inset-block-end: var(--space-stack-4x);
	}

	.btn--ghost-underline:is(:hover, :focus-visible)::before {
		scale: 0 1;
	}

	/* Color type */
	.btn--primary:is(.btn--solid),
	.btn--primary.btn--outline::before,
	.btn--primary.btn--ghost-underline::before {
		color: var(--on-primary);
		background-color: var(--primary);
	}

	.btn--primary.btn--outline.btn:is(:hover, :focus-visible, :active) {
		color: var(--on-primary);
		border-color: var(--primary);
	}

	.btn--primary:is(.btn--outline, .btn--ghost, .btn--ghost-underline) {
		color: var(--primary);
	}

	.btn--secondary:is(.btn--solid),
	.btn--secondary.btn--outline::before,
	.btn--secondary.btn--ghost-underline::before {
		color: var(--on-secondary);
		background-color: var(--secondary);
	}

	.btn--secondary.btn--outline.btn:is(:hover, :focus-visible, :active) {
		color: var(--on-secondary);
		border-color: var(--secondary);
	}

	.btn--secondary:is(.btn--outline, .btn--ghost, .btn--ghost-underline) {
		color: var(--secondary);
	}
</style>
