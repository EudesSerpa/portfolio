---
import type { AstroInstance } from "astro";
import { getIconName, formatIconName } from "@utils/iconFiles";

/**
 * Use the files in "./icons/tech" folder to get all tech icons
 *
 * Add more?
 * 1. Add a new file .astro in the "./icons/tech" folder
 * 2. The filename will be the shown text:
 * 		- the name must be in kebab-case
 */
const techIconComponents: AstroInstance[] = await Astro.glob(
	"./icons/techs/*.astro"
);
---

<ul class="skills flex-group">
	{
		techIconComponents.map((IconComponent) => (
			<li class="skills__item">
				<span class="skills__icon">
					<IconComponent.default />
				</span>
				<span class="skills__name">
					{formatIconName(getIconName(IconComponent))}
				</span>
			</li>
		))
	}
</ul>

<style>
	.skills {
		gap: var(--space-stack-20x);
		align-items: flex-start;
		justify-content: start;
	}

	.skills__item {
		--inner-border-radius: 6px;
		--outer-border-radius: 8px;

		position: relative;
		display: grid;
		gap: var(--space-stack-8x);
		place-items: center;
		padding: clamp(var(--space-stack-4x), 2vw, var(--space-stack-8x))
			clamp(var(--space-stack-8x), 4vw, var(--space-stack-16x));
		color: var(--medium-emphasis);
		background-color: var(--surface);
		border-radius: var(--inner-border-radius);
	}

	.skills__item::before {
		position: absolute;
		inset: calc(var(--space-stack-2x) * -1);
		z-index: -1;
		content: "";
		background: conic-gradient(
			from var(--gradient-angle),
			var(--gradient-stop-1),
			var(--gradient-stop-2),
			var(--gradient-stop-1)
		);
		border-radius: var(--outer-border-radius);
		box-shadow: var(--elevation-1);
		animation: rotation 6s linear infinite;
	}

	@property --gradient-angle {
		syntax: "<angle>";
		initial-value: 0deg;
		inherits: false;
	}

	@keyframes rotation {
		to {
			--gradient-angle: 360deg;
		}
	}

	.skills__icon {
		block-size: clamp(28px, 3vw, 32px);
		aspect-ratio: 1;
	}

	.skills__name {
		text-transform: capitalize;
	}
</style>
