---
import Certificate from "@components/Certification/Certificate.astro";
import Issuer from "@components/Certification/Issuer.astro";
import UnabLogo from "@assets/unab-logo.png";
import PlatziLogo from "@assets/platzi-logo.png";
import DBPlatzi from "@assets/DB-career.webp";
import Button from "@components/buttons/Button.astro";
import Icon from "@components/Icon.astro";

interface Props {
	issuer: string;
}

const { issuer } = Astro.props;

export const certifications: any = {
	platzi: {
		image: PlatziLogo,
		certificates: [
			{
				name: "Carrera de bases de datos",
				image: DBPlatzi,
				href: "#",
			},
			{
				name: "Fundamentos de ingeniería de software",
				image: DBPlatzi,
				href: "#",
			},
			{
				name: "Fundamentos de TypeScript",
				image: DBPlatzi,
				href: "#",
			},
			{
				name: "Introducción a React.js",
				image: DBPlatzi,
				href: "#",
			},
			{
				name: "Administración de servidores Linux",
				image: DBPlatzi,
				href: "#",
			},
			{
				name: "Backend con Node.js: API Rest con Express.js",
				image: DBPlatzi,
				href: "#",
			},
			{
				name: "Desarrollo de aplicaciones web",
				image: DBPlatzi,
				href: "#",
			},
		],
	},
	UNAB: {
		image: UnabLogo,
		certificates: [
			{
				name: "Carrera de bases de datos",
				image: DBPlatzi,
				href: "#",
			},
			{
				name: "Fundamentos de ingenieria de software",
				image: DBPlatzi,
				href: "#",
			},
		],
	},
};
---

<section class="certification">
	<header>
		<Issuer name={issuer} image={certifications[issuer]?.image} />
	</header>

	<div class="certification__body scroller-container js-scroller-container">
		<div class="scroller-btns js-scroller-btns">
			<Button
				class="scroller-btn scroller-btn--prev js-scroller-btn"
				type="solid"
			>
				<Icon
					class="scroller-arrow scroller-arrow--prev"
					icon="arrow"
					size="large"
				/>
			</Button>
			<Button
				class="scroller-btn scroller-btn--next js-scroller-btn"
				type="solid"
			>
				<Icon
					class="scroller-arrow scroller-arrow--next"
					icon="arrow"
					size="large"
				/>
			</Button>
		</div>

		<ul class="certification__list horizontal-scroller js-scroller">
			{
				certifications[issuer]?.certificates.map(
					({ name, image }: { name: string; image: string }) => (
						<li class="scroller-item js-scroller-item">
							<Certificate name={name} href="#" image={image} />
						</li>
					)
				)
			}
		</ul>
	</div>
</section>

<style>
	.certification__body {
		margin-block-start: var(--space-stack-8x);
	}

	/* Scroller */
	.scroller-container {
		position: relative;
		display: grid;
		isolation: isolate;
	}

	.scroller-container::before,
	.scroller-container::after {
		--gradient-angle: 90deg;

		position: absolute;
		inset-block: var(--space-stack-10x);
		z-index: 1;
		pointer-events: none;
		content: "";
		user-select: none;
		background-image: linear-gradient(
			var(--gradient-angle),
			var(--background),
			var(--background-transparent)
		);
		opacity: 0;
		transition: opacity 0.5s var(--appears-transition);
		inline-size: 3.5rem;
		-webkit-mask-image: linear-gradient(
			var(--gradient-angle),
			var(--background),
			var(--background-transparent)
		);
		mask-image: linear-gradient(
			var(--gradient-angle),
			var(--background),
			var(--background-transparent)
		);
	}

	.scroller-container::before {
		inset-inline-start: -1px;
	}

	.scroller-container::after {
		--gradient-angle: -90deg;

		inset-inline-end: -1px;
	}

	.scroller-container:is(.off-left-edge)::before,
	.scroller-container:is(.off-right-edge)::after {
		opacity: 1;
	}

	.scroller-btns {
		display: contents;
	}

	.scroller-btns:is(.no-overflowing) {
		display: none;
	}

	@media (hover: none) and (pointer: coarse) {
		/* Smartphones/touchscreens devices */
		.scroller-btns {
			display: none;
		}
	}

	.scroller-btn {
		position: absolute;
		inset-block: var(--space-stack-10x);
		z-index: 2;
		background-color: var(--surface-transparency);
		opacity: 0;
		transition: opacity 0.3s var(--appears-transition),
			scale 0.3s var(--appears-transition);
		inline-size: 3rem;
		backdrop-filter: var(--background-blur);
	}

	.scroller-btn:is(:hover, :focus-visible) {
		opacity: 1;
		scale: 1.05;
	}

	.scroller-btn:is([disabled]) {
		color: var(--disabled);
		cursor: not-allowed;
	}

	.scroller-btn--prev {
		inset-inline-start: 0;
	}

	.scroller-btn--next {
		inset-inline-end: 0;
	}

	.scroller-arrow--prev {
		rotate: 90deg;
	}

	.scroller-arrow--next {
		rotate: -90deg;
	}

	.horizontal-scroller {
		--content-spacing: var(--space-stack-20x);

		display: flex;
		flex-wrap: nowrap;
		gap: var(--content-spacing);
		padding-block: calc(var(--content-spacing) / 2);
		overflow-x: auto;
		overflow-inline: auto;
		overscroll-behavior-inline: contain;
		scroll-snap-type: inline mandatory;
		scroll-padding-inline: var(--content-spacing);
		-webkit-overflow-scrolling: touch;
	}

	@media (hover: hover) and (pointer: fine) {
		/* Computer/Laptop devices */
		.horizontal-scroller::-webkit-scrollbar {
			display: none;
		}
	}

	.scroller-item {
		scroll-snap-align: center;
	}
</style>

<script>
	/**
	 * Scroller funcionality
	 */

	/**
	 * CSS classes indicates overflowing
	 */
	const CLASS_NO_OVERFLOWING = "no-overflowing";
	const CLASS_OFF_LEFT_EDGE = "off-left-edge";
	const CLASS_OFF_RIGHT_EDGE = "off-right-edge";

	const $scrollers = document.querySelectorAll(
		".js-scroller"
	) as NodeListOf<HTMLUListElement>;
	const $scrollItemSize =
		document.querySelector(".js-scroller-item")!.clientWidth;

	/**
	 * Checks if an element is overflowing
	 *
	 * @param {HTMLElement} element - The element to check
	 * @returns {boolean} - A boolean indicating if the element is overflowing
	 */
	function isOverflowing(element: HTMLElement): boolean {
		return element.scrollWidth > element.offsetWidth;
	}

	/**
	 * Adds CSS class to the element
	 *
	 * @param {HTMLElement} element - The element to add the class to
	 * @param {string} className - The CSS class name
	 */
	function addClass(element: HTMLElement, className: string): void {
		element.classList.add(className);
	}

	/**
	 * Removes CSS class from the element
	 *
	 * @param {HTMLElement} element - The element to remove the class from
	 * @param {string} className - The CSS class name
	 */
	function removeClass(element: HTMLElement, className: string): void {
		element.classList.remove(className);
	}

	/**
	 * Disables the button
	 *
	 * @param {HTMLButtonElement} button - The button element
	 */
	function disableButton(button: HTMLButtonElement): void {
		button.disabled = true;
	}

	/**
	 * Enables the button
	 *
	 * @param {HTMLButtonElement} button - The button element
	 */
	function enableButton(button: HTMLButtonElement): void {
		button.disabled = false;
	}

	/**
	 * Scrolls the scroller by a specified amount
	 *
	 * @param {HTMLElement} scroller - The scroller element
	 * @param {number} scrollAmount - The amount to scroll by
	 */
	function scrollByTo(scroller: HTMLElement, scrollAmount: number): void {
		scroller.scrollBy({
			left: scrollAmount,
			behavior: "smooth",
		});
	}

	function initScroller() {
		$scrollers.forEach((scroller) => {
			const $scrollerContainer = scroller.parentElement!;

			// No overflowing
			if (!isOverflowing(scroller)) {
				const $btnContainer = $scrollerContainer.querySelector(
					".js-scroller-btns"
				) as HTMLElement;
				addClass($btnContainer, CLASS_NO_OVERFLOWING);
				return;
			}

			// Overflowing logic
			addClass($scrollerContainer, CLASS_OFF_RIGHT_EDGE);

			const [$prevButton, $nextButton] = $scrollerContainer.querySelectorAll(
				".js-scroller-btn"
			) as NodeListOf<HTMLButtonElement>;

			const $firstElement = scroller.firstElementChild!;
			const $lastElement = scroller.lastElementChild!;

			$firstElement.setAttribute("data-edge", "left");
			$lastElement.setAttribute("data-edge", "right");

			const getButtonsBaseOnEdge = (edge: string): HTMLButtonElement[] => {
				return edge === "right"
					? [$nextButton, $prevButton]
					: [$prevButton, $nextButton];
			};

			/**
			 * Handles edge intersection
			 *
			 * @param {IntersectionObserverEntry[]} entries - The intersection observer entries.
			 */
			const onIntersect = (entries: IntersectionObserverEntry[]): void => {
				entries.forEach(({ isIntersecting, target }) => {
					const targetEdge = target.getAttribute("data-edge") as string;
					const intersectingRightEdge = targetEdge === "right";
					const previousActiveElement = document.activeElement;
					const [$buttonIntersected, $buttonNoIntersected] =
						getButtonsBaseOnEdge(targetEdge);

					if (isIntersecting) {
						removeClass(
							$scrollerContainer,
							intersectingRightEdge ? CLASS_OFF_RIGHT_EDGE : CLASS_OFF_LEFT_EDGE
						);

						disableButton($buttonIntersected);
					} else {
						addClass(
							$scrollerContainer,
							intersectingRightEdge ? CLASS_OFF_RIGHT_EDGE : CLASS_OFF_LEFT_EDGE
						);

						enableButton($buttonIntersected);
					}

					if (previousActiveElement === $buttonIntersected) {
						$buttonNoIntersected.focus();
					}
				});
			};

			const observer = new IntersectionObserver(onIntersect, {
				root: scroller,
				threshold: 0.95,
			});

			observer.observe($firstElement);
			observer.observe($lastElement);

			$prevButton.addEventListener("click", (_evt: Event) =>
				scrollByTo(scroller, -$scrollItemSize)
			);
			$nextButton.addEventListener("click", (_evt: Event) =>
				scrollByTo(scroller, $scrollItemSize)
			);
		});
	}

	initScroller();
</script>
