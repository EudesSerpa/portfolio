---
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import SectionTitle from "@components/SectionTitle.astro";
import Profile from "@components/Profile.astro";
import SocialMedia from "@components/SocialMedia.astro";
import Skills from "@components/Skills.astro";
import ServiceList from "@components/ServiceList.astro";
import type { Services } from "@components/ServiceList.astro";
import WebImage from "@assets/web-dev.webp";
import DBImage from "@assets/db-admin.webp";
import EmbeddedSystemsImage from "@assets/embedded-systems.webp";
import WebDesignImage from "@assets/web-design.webp";
import DesktopImage from "@assets/desktop-dev.webp";
import type { Props as EducationProps } from "@components/EducationCard.astro";
import UnimagLogo from "@assets/unimag-logo.png";
import UnabLogo from "@assets/unab-logo.png";
import PlatziLogo from "@assets/platzi-logo.png";
import SenaLogo from "@assets/sena-logo.png";
import EducationList from "@components/EducationList.astro";
import Button from "@components/buttons/Button.astro";
import { AUTHOR } from "@utils/const";
import Icon from "@components/Icon.astro";
import ButtonIcon from "@components/buttons/ButtonIcon.astro";
import Certification from "@components/Certification/index.astro";
import type { CertificationsType } from "@components/Certification/types";

const t = useTranslations(getLangFromUrl(Astro.url));

const [title, titleHighlight] = t("about.title").split(" ");
const whoIAmTexts: string[] = t("about.whoiam.description").split("---");

const services: Services = [
	{
		name: t("about.service.web.title"),
		description: t("about.service.web.text"),
		image: WebImage,
	},
	{
		name: t("about.service.desktop.title"),
		description: t("about.service.desktop.text"),
		image: DesktopImage,
	},
	{
		name: t("about.service.design.title"),
		description: t("about.service.design.text"),
		image: WebDesignImage,
	},
	{
		name: t("about.service.embedded.title"),
		description: t("about.service.embedded.text"),
		image: EmbeddedSystemsImage,
	},
	{
		name: t("about.service.db.title"),
		description: t("about.service.db.text"),
		image: DBImage,
	},
];

const educations: EducationProps[] = [
	{
		institute: t("about.education.unimag"),
		type: t("about.education.type.professional"),
		career: t("about.education.unimag.career"),
		degree: t("about.education.degree.engineer"),
		initDate: "2016-02-01",
		finishDate: "2021-12-15",
		image: UnimagLogo,
	},
	{
		institute: t("about.education.unab"),
		type: t("about.education.type.technical"),
		career: t("about.education.unab.career"),
		degree: t("about.education.degree.technician"),
		initDate: "2022-05-05",
		finishDate: "2022-11-09",
		image: UnabLogo,
	},
	{
		institute: "Platzi",
		type: t("about.education.type.self-taught"),
		career: t("about.education.platzi.career"),
		degree: t("about.education.degree.no"),
		initDate: "2021-09-01",
		image: PlatziLogo,
	},
	{
		institute: t("about.education.sena"),
		type: t("about.education.type.technological"),
		career: t("about.education.sena.career"),
		degree: t("about.education.degree.technologist"),
		initDate: "2023-05-20",
		image: SenaLogo,
	},
];

const certifications: CertificationsType = {
	platzi: {
		image: "/src/assets/platzi-logo.png",
		certificates: [
			{
				name: t("certifications.platzi.db-career"),
				image: "/src/assets/certifications/DB-career.webp",
				href: "https://www.dropbox.com/s/h181arppgjz6zbh/diploma-base-de-datos.pdf?dl=0",
			},
		],
	},
	UNAB: {
		image: "/src/assets/unab-logo.png",
		certificates: [
			{
				name: t("certifications.unab.final"),
				image: "/src/assets/certifications/unab_tecnico_laboral.webp",
				href: "https://www.dropbox.com/s/ajirars39y36g5g/TECLABWEBF_Certificado%20T%C3%A9cnico%20Laboral%20Web.pdf?dl=0",
			},
			{
				name: t("certifications.unab.ciclo4"),
				image: "/src/assets/certifications/unab_ciclo4_web.webp",
				href: "https://www.dropbox.com/s/a6qpbjoab62240w/Certificado_Ciclo4_Mision_Tic_2022.pdf?dl=0",
			},
			{
				name: t("certifications.unab.ciclo3"),
				image: "/src/assets/certifications/unab_ciclo3_software.webp",
				href: "https://www.dropbox.com/s/4jfotipcjeawfh1/Certificado_Ciclo3_Mision_Tic_2022.pdf?dl=0",
			},
			{
				name: t("certifications.unab.ciclo2"),
				image: "/src/assets/certifications/unab_ciclo2_basic.webp",
				href: "https://www.dropbox.com/s/ue7rwb67o2wjbqo/Certificado_Ciclo2_Mision_Tic_2022.pdf?dl=0",
			},
		],
	},
};
---

<section id="about" class="about section wrapper">
	<header>
		<SectionTitle>
			<span slot="text">{title}</span>
			<span slot="text-highlight">{titleHighlight}</span>
		</SectionTitle>
	</header>

	<section class="whoiam subsection subsection--whoiam">
		<article class="whoiam__bio">
			<header class="subsection__header">
				<h3 class="subsection__title">{t("about.whoiam.title")}</h3>
			</header>

			<div class="whoiam__description">
				{whoIAmTexts.map((text: string) => <p>{text}</p>)}
			</div>
		</article>

		<div class="whoiam__profile">
			<Profile class="whoiam__profile-image" />
			<SocialMedia size="large" />
		</div>
	</section>

	<section class="skills subsection subsection--skills">
		<header class="subsection__header">
			<h3 class="subsection__title">{t("about.skills.title")}</h3>
		</header>

		<Skills />
	</section>

	<section class="services subsection subsection--services full-bleed">
		<header class="subsection__header">
			<h3 class="subsection__title">{t("about.service.title")}</h3>
		</header>

		<ServiceList services={services} />
	</section>

	<section class="education subsection subsection--education">
		<header class="subsection__header">
			<h3 class="subsection__title">{t("about.education.title")}</h3>
		</header>

		<EducationList educations={educations} />
	</section>

	<section class="certifications subsection subsection--certifications">
		<header class="certifications__header subsection__header flex-group">
			<h3 class="subsection__title">{t("about.certifications.title")}</h3>

			<>
				<ButtonIcon
					class="certifications__link certifications__link--mobile"
					type="outline"
					color="primary"
					href={`${AUTHOR.linkedin}/details/certifications`}
					isExternal
				>
					<Icon icon="external-link" size="small" />
				</ButtonIcon>

				<Button
					class="certifications__link"
					type="ghost-underline"
					color="primary"
					isExternal
					href={`${AUTHOR.linkedin}/details/certifications`}
				>
					<span>{t("about.certifications.see-all-link")}</span>
					<Icon icon="external-link" size="small" />
				</Button>
			</>
		</header>

		<ul id="js-certifications" class="certifications__list">
			{
				Object.entries(certifications).map(
					([issuer, { image, certificates }]) => (
						<li class="certification__item">
							<Certification
								name={issuer}
								image={image}
								certificates={certificates}
							/>
						</li>
					)
				)
			}
		</ul>

		<footer class="certifications__ctas js-certifications__ctas flex-group">
			<Button
				class="certifications__cta certifications__cta--more js-certifications__cta--more"
				type="outline"
				color="primary"
			>
				<span>{t("about.certifications.btn.see-more")}</span>
				<Icon icon="arrow-bottom" size="small" />
			</Button>
			<Button
				class="certifications__cta certifications__cta--less js-certifications__cta--less"
				type="ghost"
			>
				<span>{t("about.certifications.btn.see-less")}</span>
				<Icon icon="arrow-top" size="small" />
			</Button>
		</footer>
	</section>
</section>

<style>
	.subsection__header {
		margin-block-end: var(--space-stack-10x);
	}

	.subsection__title {
		font-size: var(--font-size-2x-large);
	}

	/* ------------------------------------*\
		#Subsection: Who I am?
	\*------------------------------------ */

	.whoiam {
		display: grid;
		grid-template-areas:
			"profile"
			"text";
		gap: var(--space-stack-32x);
	}

	@media screen and (width >= 58.75rem) {
		.whoiam {
			grid-template-areas: "text profile";
			place-content: space-between;
		}
	}

	.whoiam__bio {
		grid-area: text;
	}

	.whoiam__description {
		display: grid;
		gap: var(--space-stack-8x);
		max-inline-size: 70ch;
		font-size: var(--font-size-medium);
		color: var(--medium-emphasis);
	}

	.whoiam__profile {
		display: grid;
		grid-area: profile;
		gap: var(--space-stack-20x);
		place-items: center;
	}

	.whoiam__profile-image {
		position: relative;
		inline-size: clamp(min(100%, 280px), 40vw, 360px);
	}

	.whoiam__profile-image::before {
		position: absolute;
		inset: -5%;
		z-index: -1;
		aspect-ratio: 1;
		content: "";
		background: conic-gradient(
			from var(--gradient-angle),
			var(--gradient-stop-2),
			var(--gradient-stop-1),
			var(--gradient-stop-2)
		);
		filter: blur(5rem) opacity(var(--gradient-opacity, 0.75));
		border-radius: var(--radius-circle);
		animation: rotation 20s linear infinite;
	}

	html:is(.theme-dark) .whoiam__profile-image::before {
		--gradient-opacity: 0.3;
	}

	@property --gradient-angle {
		syntax: "<angle>";
		initial-value: 0deg;
		inherits: false;
	}

	@keyframes rotation {
		to {
			--gradient-angle: 360deg;
		}
	}

	/* ------------------------------------*\
		#Subsection: What I can do?
	\*------------------------------------ */

	.services {
		--bleed-color: var(--surface-transparency);

		padding-block: var(--space-stack-20x);
		background-color: var(--bleed-color);
	}

	/* ------------------------------------*\
		#Subsection: Certifications
	\*------------------------------------ */

	.certifications__header {
		justify-content: space-between;
	}

	.certifications__link:not(.certifications__link--mobile) {
		display: none;
	}

	@media screen and (width >= 31rem) {
		.certifications__link--mobile {
			display: none;
		}

		.certifications__link:not(.certifications__link--mobile) {
			display: inline-flex;
		}
	}

	.certifications__list {
		--row-size: 310px;
		--elements-to-show: 2;
		--gap: var(--space-stack-20x);

		display: grid;
		gap: var(--gap);
		overflow: hidden;
		transition: max-block-size 0.5s ease-in-out;
		max-block-size: calc(var(--row-size) * var(--elements-to-show));
		will-change: max-block-size;
	}

	.certifications__ctas {
		gap: var(--space-stack-20x);
		margin-block-start: var(--space-stack-20x);
	}

	.certifications__cta--less {
		display: none;
		color: var(--medium-emphasis);
	}
</style>

<script>
	/**
	 * Show more/less buttons in certifications
	 */

	import { $ } from "@utils/selectElements";

	interface ButtonAccessibilityOptions {
		isHidden: boolean;
		isDisabled: boolean;
	}

	/**
	 * Gets the value of a CSS property from an element
	 *
	 * @param {Element} element - The element
	 * @param {string} property - The CSS property to retrieve
	 * @returns {string | null} - The value of the CSS property or null if it is not found
	 */
	function getPropertyValueFromElement(
		element: Element,
		property: string
	): string | null {
		return window.getComputedStyle(element)?.getPropertyValue(property) ?? null;
	}

	/**
	 * Changes the max height of an element
	 *
	 * @param {HTMLElement} element - The element to modify
	 * @param {number} newMaxHeight - The new max height value
	 * @returns {number} - The new max height value
	 */
	function changeMaxHeight(element: HTMLElement, newMaxHeight: number): number {
		element.style.maxBlockSize = `${newMaxHeight}px`;
		return newMaxHeight;
	}

	/**
	 * Updates the accessibility attributes of a button
	 *
	 * @param {HTMLButtonElement} button - The button element
	 * @param {Record<string, boolean>} options - Object containing accessibility options
	 */
	function updateButtonAccessibility(
		button: HTMLButtonElement,
		{ isHidden, isDisabled }: ButtonAccessibilityOptions
	) {
		button.setAttribute("aria-hidden", String(isHidden));
		button.disabled = isDisabled;

		button.style.display = isHidden ? "none" : "inline-flex";
	}

	function getElementsHeight(elements: Element[]): number {
		return elements.reduce((acc, ele) => acc + ele.clientHeight, 0);
	}

	/**
	 * Initializes the show more/less functionality
	 */
	function init() {
		const certificationsGroup = $("#js-certifications") as HTMLElement;
		const showMoreBtn = $(".js-certifications__cta--more") as HTMLButtonElement;
		const showLessBtn = $(".js-certifications__cta--less") as HTMLButtonElement;

		const elements = Array.from(certificationsGroup.children);
		const totalHeight = certificationsGroup.scrollHeight;

		const elementsToShow: number =
			Number(
				getPropertyValueFromElement(certificationsGroup, "--elements-to-show")
			) ?? 2;
		const elementsGap =
			parseInt(
				getPropertyValueFromElement(certificationsGroup, "gap") ?? "0"
			) ?? 20;

		let elementsShown = elementsToShow;
		const elementsHeight = getElementsHeight(elements.slice(0, elementsShown));
		const initialHeight = elementsHeight + elementsGap;

		updateButtonAccessibility(showMoreBtn, {
			isHidden: false,
			isDisabled: false,
		});
		updateButtonAccessibility(showLessBtn, {
			isHidden: true,
			isDisabled: true,
		});

		/* Removes the scroll buttons when there are no hidden elements */
		if (elements.length <= elementsToShow) {
			const ctaContainer = $(".js-certifications__ctas") as HTMLElement;
			ctaContainer.style.display = "none";

			return;
		}

		let previousHeight = changeMaxHeight(certificationsGroup, initialHeight);

		/**
		 * Event handler for the "Show Less" button click event
		 *
		 * @param {MouseEvent} _e - The mouse event
		 */
		const handleShowLess = (_e: MouseEvent) => {
			updateButtonAccessibility(showMoreBtn, {
				isHidden: false,
				isDisabled: false,
			});
			updateButtonAccessibility(showLessBtn, {
				isHidden: true,
				isDisabled: true,
			});

			previousHeight = changeMaxHeight(certificationsGroup, initialHeight);
			elementsShown = elementsToShow;

			showMoreBtn.focus();
			certificationsGroup.scrollIntoView();
		};

		/**
		 * Event handler for the "Show More" button click event
		 *
		 * @param {MouseEvent} _e - The mouse event
		 */
		const handleShowMore = (_e: MouseEvent) => {
			const newHeight =
				previousHeight +
				getElementsHeight(
					elements.slice(elementsShown, elementsShown + elementsToShow)
				) +
				elementsGap * elementsToShow;

			updateButtonAccessibility(showLessBtn, {
				isHidden: false,
				isDisabled: false,
			});

			const areThereMoreContentToShow = newHeight < totalHeight;

			elementsShown = areThereMoreContentToShow
				? elementsShown + elementsToShow
				: elements.length;

			previousHeight = areThereMoreContentToShow
				? changeMaxHeight(certificationsGroup, newHeight)
				: changeMaxHeight(certificationsGroup, totalHeight);

			if (!areThereMoreContentToShow) {
				updateButtonAccessibility(showMoreBtn, {
					isDisabled: true,
					isHidden: false,
				});

				showLessBtn.focus();
			}
		};

		showMoreBtn.addEventListener("click", handleShowMore);
		showLessBtn.addEventListener("click", handleShowLess);
	}

	init();
</script>

<script>
	/**
	 * A11y certifications: focus managment
	 */

	import { $, $$ } from "@utils/selectElements";

	const $certificationList = $("#js-certifications");
	const $certificationItems = $$(".certification__item");

	/**
	 * Handles the intersection of certification items
	 *
	 * @param {IntersectionObserverEntry[]} entries - The intersection observer entries
	 */
	const onIntersect = (entries: IntersectionObserverEntry[]): void => {
		entries.forEach(({ isIntersecting, target }) => {
			target.toggleAttribute("inert", !isIntersecting);
		});
	};

	const observer = new IntersectionObserver(onIntersect, {
		root: $certificationList,
		threshold: 0.95,
	});

	$certificationItems?.forEach(($certificationItem) => {
		observer.observe($certificationItem);
	});
</script>
